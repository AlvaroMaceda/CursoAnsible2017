---

- name: Workaround for relative private keys
  hosts: all
  gather_facts: no
  tags:
    - preparation

  tasks:
    - name: Set  correct ssh key path
      set_fact:
        ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file | realpath }}"
      when: ansible_ssh_private_key_file is defined

- name: Prepare server to work with ansible
  hosts: all
  gather_facts: False
  become: true
  tags:
    - preparation

  tasks:
    - name: install python 2
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)

- name: Upgrade packages and set hostname
  hosts: all
  become: yes
  tags:
    - general

  tasks:

    - name: Update all packages to the latest version
      apt:
        upgrade: dist

    - hostname:
        name: vagrant1

- name: Create users
  hosts: all
  become: yes
  tags:
    - general

  tasks:

    - name: Create user deploy
      user: name=deploy shell=/bin/bash groups=sudo
    #
    # - name: Create user deploy v2
    #   user: >
    #     name=deploy
    #     shell=/bin/bash
    #     groups=sudo
    #
    # - name: Create user deploy v3
    #   user:
    #     name: deploy
    #     shell: /bin/bash
    #     groups: sudo
    #
    # - name: Create user deploy v4
    #   user: name=deploy shell=/bin/bash
    #   args:
    #     groups: sudo

- name: Install rbenv
  hosts: all
  become: yes
  tags:
    - rbenv

  tasks:

    - name: Install rbenv
      apt:
        name: rbenv
        state: present
        update_cache: yes

    - name: Install packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - build-essential
        - libssl-dev
        - libreadline-dev

    # - name: Install depences
    #   apt: name=build-essential state=present update_cache=yes
    #
    # - name: Install depences
    #   apt: name=libssl-dev state=present update_cache=yes
    #
    # - name: Install depences
    #   apt: name=libreadline-dev state=present update_cache=yes

- name: Configure rbenv
  hosts: all
  become: yes
  become_user: deploy
  tags:
    - rbenv

  tasks:

      # echo 'eval "$(rbenv init -)"' >> ~/.bashrc
      - name: rbenv initialization
        # shell: "echo 'eval \"$(rbenv init -)\"' >> ~/.bashrc"
        lineinfile:
            dest: ~/.bashrc
            # identificar la línea
            regexp: eval "\$\(rbenv init -\)"
            # decir el contenido de esa línea
            line: eval "$(rbenv init -)"
            # dónde vamos a poner la lína
            insertafter: EOF

      # git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
      - name: Install ruby-build plugins
        git:
          repo: https://github.com/rbenv/ruby-build.git
          dest: "~/.rbenv/plugins/ruby-build"

      # rbenv install 2.4.0
      - name: Install ruby 2.4.0
        command: rbenv install 2.4.0
        args:
          creates: "~/.rbenv/versions/2.4.0"

      # rbenv global 2.4.0
      - name: Make 2.4.0 global
        command: rbenv global {{ ruby_version }}

      # gem install bundler
      - name: Install bundler
        shell:  eval "$(/usr/bin/rbenv init -)"  && gem install bundler
        args:
          executable: /bin/bash
          creates: ~/.rbenv/versions/2.4.0/bin/bundler

      # rbenv rehash
      - name: Rehash bundler
        command: rbenv rehash

- name: Install nginx and passenger
  hosts: all
  become: yes
  become_user: root
  tags:
    - nginx
    - passenger

  tasks:

    # sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
    - name: Add repository key
      apt_key:
        keyserver: hkp://keyserver.ubuntu.com:80
        id: 561F9B9CAC40B2F7
        state: present

    # sudo apt-get install -y apt-transport-https ca-certificates
    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - apt-transport-https
        - ca-certificates

    # sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main > /etc/apt/sources.list.d/passenger.list'
    - name: Add Passenger APT repository
      apt_repository:
        repo: deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main
        state: present

    # sudo apt-get install -y nginx-extras passenger
    - name: Install Passenger & Nginx
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - nginx-extras
        - passenger


- name: Configure nginx and passenger
  hosts: all
  become: yes
  become_user: root
  tags:
    - nginx
    - passenger

  tasks:

      - name: Include passenger configuration in nginx
        lineinfile:
            dest: /etc/nginx/nginx.conf
            regexp: include \/etc\/nginx\/passenger\.conf;
            line: include /etc/nginx/passenger.conf;
            insertafter: EOF

      - name: Set corrent ruby version in passenger
        lineinfile:
            dest: /etc/nginx/passenger.conf
            regexp: passenger_ruby .*
            line: passenger_ruby /home/deploy/.rbenv/shims/ruby;
            insertafter: EOF

      -  name: Restart nginx
         service:
          name: nginx
          state: restarted

- name: Install mysql
  hosts: all
  become: yes
  become_user: root
  tags:
    - mysql

  tasks:

    # sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password 1234'
    - name: Set MySQL root password
      debconf:
        name: mysql-server
        question: mysql-server/root_password
        value: 1234
        vtype: password

    # sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password 1234'
    - name: Set MySQL root password
      debconf:
        name: mysql-server
        question: mysql-server/root_password_again
        value: 1234
        vtype: password

    # sudo apt-get install mysql-server mysql-client libmysqlclient-dev
    - name: Install MySQL
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - mysql-server
        - mysql-client
        - libmysqlclient-dev
        - python-mysqldb

    - name: Copy mysql automatic login file
      copy:
        src: my.cnf
        dest: /root/.my.cnf
        owner: root
        group: root
        mode: u=rw,g=,o=


- name: Install application
  hosts: all
  become: yes
  become_user: root
  tags:
    - app

  tasks:

    - name: Clone app repository
      become_user: deploy
      git:
        repo: https://github.com/AlvaroMaceda/DuckRecognizer.git
        dest: "~/DuckRecognizer"

    - name: Copy nginx host configuration
      template:
        src: app.conf
        dest: /etc/nginx/sites-enabled/default
        owner: root
        group: root
        mode: u=rw,g=r,o=r

    -  name: Restart nginx
       service:
        name: nginx
        state: restarted

- name: Configure MySQL
  hosts: all
  become: yes
  become_user: root
  tags:
    - app
    - mysql

  tasks:

    - name: Create Database
      mysql_db:
        name: DuckRecognizer
        state: present

    - name: Create user and give permissions to user
      mysql_user:
        name: duckuser
        password: duckuser
        priv: "DuckRecognizer.*:ALL"
        state: present


- name: Configure application
  hosts: all
  become: yes
  become_user: deploy
  tags:
    - conf
  vars:
    db_user: duckuser
    db_password: duckuser

  tasks:

    - name: Install required packages for gems
      become_user: root
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - libsqlite3-dev

    - name: Install gems with bundler
      bundler:
        state: present
        executable: ~/.rbenv/shims/bundler
        chdir: /home/deploy/DuckRecognizer

    - name: Create secrets file
      template:
        src: secrets.yml.j2
        dest: ~/DuckRecognizer/config/secrets.yml
        owner: deploy
        group: deploy
        mode: u=rw,g=,o=

    - name: Copy mysql automatic login file
      copy:
        src: my.cnf
        dest: ~/.my.cnf
        owner: deploy
        group: deploy
        mode: u=rw,g=,o=

    - name: Run migrations
      shell: /home/deploy/.rbenv/shims/bundle exec rake db:migrate
      args:
        chdir: /home/deploy/DuckRecognizer













# Lock
