---

- name: Pruebas
  hosts: all
  tags: debug

  tasks:

    - name: debug
      debug: msg={{ database.user }}

- name: Workaround for relative private keys
  hosts: all
  gather_facts: no

  tasks:
    - name: Set  correct ssh key path
      set_fact:
        ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file | realpath }}"
      when: ansible_ssh_private_key_file is defined

- name: Prepare server to work with ansible
  hosts: all
  gather_facts: False
  become: true

  tasks:
    - name: install python 2
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)

- name: Upgrade server
  hosts: all
  become: true

  tasks:
    - apt:
        upgrade: dist
        update_cache: yes

- name: Create users
  hosts: app
  become: true

  tasks:

    - name: create deploy user v1
      user:
        name: "{{ users.deploy.username }}"
        shell: "{{ users.deploy.shell }}"
        groups: "{{ users.deploy.groups }}"
        append: yes

- name: Install rbenv and build utilities
  hosts: app
  become: true

  tasks:
    - name: Update repositories cache and install rbenv
      apt:
        name: rbenv
        state: present
        update_cache: yes

    - name: Install build utilities
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - build-essential
        - libssl-dev
        - libreadline-dev
        - zlib1g-dev

- name: Configure rbenv
  hosts: app
  become: true
  become_user: "{{ users.deploy.username }}"

  tags:
      - rbenv

  tasks:

    # echo 'eval "$(rbenv init -)"' >> ~/.bashrc
    - name: Automatically init rbenv
      lineinfile:
        # path: ~/.bashrc
        dest: ~/.bashrc
        regexp: eval "\$\(rbenv init -\)"
        line: eval "$(rbenv init -)"
        insertafter: EOF

    # git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins
    - name: Install rbenv ruby-build plugin
      git:
        repo: git://github.com/sstephenson/ruby-build.git
        dest: ~/.rbenv/plugins/ruby-build

    # rbenv install {{ ruby.version }}
    - name: Install ruby
      command: /usr/bin/rbenv install {{ ruby.version }}
      args:
        creates: ~/.rbenv/versions/{{ ruby.version }}

    # rbenv global {{ ruby.version }}
    - name: Make ruby version global global
      command: /usr/bin/rbenv global {{ ruby.version }}

    # gem install bundler
    - name: Install Bundler
      shell: eval "$(/usr/bin/rbenv init -)" && gem install bundler
      args:
        executable: /bin/bash
        creates: ~/.rbenv/versions/{{ ruby.version }}/bin/bundler


    # rbenv rehash
    - name: Rehash rbenv
      command: /usr/bin/rbenv rehash


- name: Install nginx and passenger
  hosts: app
  become: true
  become_user: root
  tags: nginx

  tasks:

    - name: install apt-key docker
      apt_key: >
        keyserver="hkp://pgp.mit.edu:80"
        id="58118E89F3A912897C070ADBF76221572C52609D"

    - name: Add key
      apt_key:
        id: 561F9B9CAC40B2F7
        keyserver: "hkp://keyserver.ubuntu.com:80"
        state: present

    - name: Add repository
      apt_repository:
        repo: deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main
        state: present

    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - apt-transport-https
        - ca-certificates

    - name: Install nginx + passenger
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - nginx-extras
        - passenger

- name: Configure nginx and passenger
  hosts: app
  become: true
  become_user: root

  tasks:

    - name: Include Passenger configuration in nginx
      lineinfile:
        dest: /etc/nginx/nginx.conf
        regexp: include \/etc\/nginx\/passenger\.conf;
        line: include /etc/nginx/passenger.conf;
        insertafter: EOF

    - name: Point Passenger to the version of Ruby that we're using
      lineinfile:
        dest: /etc/nginx/passenger.conf
        regexp: passenger_ruby
        line: passenger_ruby /home/deploy/.rbenv/shims/ruby;
        insertafter: EOF

    - name: Restart nginx
      service:
          name: nginx
          state: restarted

- name: Install mysql server
  hosts: db
  become: true
  become_user: root

  tags:
      - mysql

  tasks:

    - name: Set MySQL root password before installing
      debconf: name='mysql-server' question='mysql-server/root_password' value='{{ mysql.root_password }}' vtype='password'

    - name: Confirm MySQL root password before installing
      debconf: name='mysql-server' question='mysql-server/root_password_again' value='{{ mysql.root_password }}' vtype='password'

    - name: Install MySQL and mysql-python
      apt:
        name: "{{ item }}"
      with_items:
        - mysql-server
        - python-mysqldb

    - name: Start the MySQL service
      action: service name=mysql state=started

    - name: Copy host configuration file to nginx
      template:
        src: my.cnf.j2
        dest: /root/.my.cnf
        owner: root
        group: root
        mode: 600

- name: Configure mysql server
  hosts: db
  become: true
  become_user: root

  tags:
      - mysql

  tasks:

    - name: Create database
      mysql_db:
        name: "{{ database.name }}"
        state: present

    - name: Create database user
      mysql_user:
        name: "{{ database.user }}"
        password: "{{ mysql.user_password }}"
        priv: '{{ database.name }}.*:ALL'
        state: present

- name: Install application
  hosts: app
  become: true
  become_user: "{{ users.deploy.username }}"

  tags:
    - app

  tasks:

    - name: Copy host configuration file to nginx
      become_user: root
      template:
        src: app.conf.j2
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: "u=rw,g=r,o=r"

    - name: Restart nginx
      become_user: root
      service:
          name: nginx
          state: restarted

    - name: Clone app repository
      git:
        repo: 'https://github.com/AlvaroMaceda/DuckRecognizer.git'
        dest: "~/DuckRecognizer"

    - name: Install dependencies for gems
      become_user: root
      apt:
        name: "{{ item }}"
      with_items:
        - libmysqlclient-dev
        - libsqlite3-dev
        # - Â¿sqlite3?

    - name: Install gems with bundler
      bundler:
        state: present
        executable: ~/.rbenv/shims/bundle
        chdir: /home/{{ users.deploy.username }}/DuckRecognizer

    - name: Create secrets file
      template:
        src: secrets.yml.j2
        dest: /home/{{ users.deploy.username }}/DuckRecognizer/config/secrets.yml

    - name: Run migration
      shell: ~/.rbenv/shims/bundle exec rake db:migrate
      args:
        chdir: /home/{{ users.deploy.username }}/DuckRecognizer
